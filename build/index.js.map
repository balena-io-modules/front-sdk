{"version":3,"sources":["index.ts"],"names":[],"mappings":"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","file":"index.js","sourcesContent":["/*\nCopyright 2017 Resin.io\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n   http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\n/* tslint:disable: max-classes-per-file */\n\nimport * as Promise from 'bluebird';\nimport * as _ from 'lodash';\nimport * as querystring from 'querystring';\nimport * as request from 'request-promise';\nimport TypedError = require('typed-error');\n\nconst URL = 'https://api2.frontapp.com';\n\ninterface Request {\n\treqType: string;\n\tpath: string;\n}\n\ntype InternalCallback = (err: Error | null, response: any | null) => void;\n\nexport class Front {\n\t// Setup resource paths for catagories.\n\t// Endpoint paths can require tags passed as parameters, as both mandatory and\n\t// optional tags.\n\t// <tag> is a mandatory tag and updates the path dynamically\n\t// [tag[:tag]] is an optional tag that is used to build query string at the end of the path\n\tpublic comment = {\n\t\tcreate: (params: CommentRequest.Create, callback?: Callback<Comment>): Promise<Comment> =>\n\t\t\tthis.httpCall({ path: 'conversations/<conversation_id>/comments', reqType: 'POST' }, params, callback),\n\t\tget: (params: CommentRequest.Get, callback?: Callback<Comment>): Promise<Comment> =>\n\t\t\tthis.httpCall({ path: 'comments/<comment_id>', reqType: 'GET' }, params, callback),\n\t\tlistMentions: (params: CommentRequest.ListMentions, callback?: Callback<CommentMentions>):\n\t\t\tPromise<CommentMentions> => this.httpCall({ path: 'comments/<comment_id>/mentions', reqType: 'GET' },\n\t\t\tparams, callback),\n\t};\n\n\tpublic conversation = {\n\t\tget: (params: ConversationRequest.Get, callback?: Callback<Conversation>): Promise<Conversation> =>\n\t\t\tthis.httpCall({ path: 'conversations/<conversation_id>', reqType: 'GET' }, params, callback),\n\t\tlist: (params?: ConversationRequest.List, callback?: Callback<Conversations>): Promise<Conversations> =>\n\t\t\tthis.httpCall({ path: 'conversations[q:page:limit]', reqType: 'GET' }, params, callback),\n\t\tlistComments: (params: ConversationRequest.ListComments, callback?: Callback<ConversationComments>):\n\t\t\tPromise<ConversationComments> => this.httpCall({ path: 'conversations/<conversation_id>/comments',\n\t\t\treqType: 'GET' }, params, callback),\n\t\tlistFollowers: (params: ConversationRequest.ListFollowers,\n\t\t\tcallback?: Callback<ConversationFollowers>): Promise<ConversationFollowers> =>\n\t\t\tthis.httpCall({ path: 'conversations/<conversation_id>/followers', reqType: 'GET' }, params, callback),\n\t\tlistInboxes: (params: ConversationRequest.ListInboxes,\n\t\t\tcallback?: Callback<ConversationInboxes>): Promise<ConversationInboxes> =>\n\t\t\tthis.httpCall({ path: 'conversations/<conversation_id>/inboxes', reqType: 'GET' }, params, callback),\n\t\tlistMessages: (params: ConversationRequest.ListMessages,\n\t\t\tcallback?: Callback<ConversationMessages>): Promise<ConversationMessages> =>\n\t\t\tthis.httpCall({ path: 'conversations/<conversation_id>/messages[page:limit]', reqType: 'GET' },\n\t\t\tparams, callback),\n\t\tupdate: (params: ConversationRequest.Update, callback?: Callback<void>): Promise<void> =>\n\t\t\tthis.httpCall({ path: 'conversations/<conversation_id}', reqType: 'PATCH' }, params, callback),\n\t};\n\n\tpublic inbox = {\n\t\tcreate: (params: InboxRequest.Create, callback?: Callback<InboxCreation>): Promise<InboxCreation> =>\n\t\t\tthis.httpCall({ path: 'inboxes', reqType: 'POST' }, params, callback),\n\t\tget: (params: InboxRequest.Get, callback?: Callback<Inbox>): Promise<Inbox> =>\n\t\t\tthis.httpCall({ path: 'inboxes/<inbox_id>', reqType: 'GET' }, params, callback),\n\t\tlist: (callback?: Callback<Inboxes>): Promise<Inboxes> =>\n\t\t\tthis.httpCall({ path: 'inboxes', reqType: 'GET' }, null, callback),\n\t\tlistChannels: (params: InboxRequest.ListChannels, callback?: Callback<InboxChannels>):\n\t\t\tPromise<InboxChannels> => this.httpCall({ path: 'inboxes/<inbox_id>/channels', reqType: 'GET' },\n\t\t\tparams, callback),\n\t\tlistConversations: (params: InboxRequest.ListConversations, callback?: Callback<InboxConversations>):\n\t\t\tPromise<InboxConversations> => this.httpCall({ path: 'inboxes/<inbox_id>/conversations[q:page:limit]',\n\t\t\treqType: 'GET' }, params, callback),\n\t\tlistTeammates: (params: InboxRequest.ListTeammates, callback?: Callback<InboxTeammates>):\n\t\t\tPromise<InboxTeammates> => this.httpCall({ path: 'inboxes/<inbox_id>/teammates', reqType: 'GET' },\n\t\t\tparams, callback),\n\t};\n\n\tpublic message = {\n\t\tget: (params: MessageRequest.Get, callback?: Callback<Message>): Promise<Message> =>\n\t\t\tthis.httpCall({ path: 'messages/<message_id>', reqType: 'GET' }, params, callback),\n\t\treceiveCustom: (params: MessageRequest.ReceiveCustom,\n\t\t\tcallback?: Callback<ConversationReference>): Promise<ConversationReference> =>\n\t\t\tthis.httpCall({ path: 'channels/<channel_id>/incoming_messages', reqType: 'POST' }, params, callback),\n\t\treply: (params: MessageRequest.Reply, callback?: Callback<Status>): Promise<Status> =>\n\t\t\tthis.httpCall({ path: 'conversations/<conversation_id>/messages', reqType: 'POST' }, params, callback),\n\t\tsend: (params: MessageRequest.Send, callback?: Callback<ConversationReference>):\n\t\t\tPromise<ConversationReference> => this.httpCall({ path: 'channels/<channel_id>/messages',\n\t\t\treqType: 'POST' }, params, callback),\n\t};\n\n\tpublic topic = {\n\t\tlistConversations: (params: TopicRequest.ListConversations, callback?: Callback<TopicConversations>):\n\t\tPromise<TopicConversations> => this.httpCall({ path: 'topics/<topic_id>/conversations[q:page:limit]',\n\t\t\treqType: 'GET' }, params, callback),\n\t};\n\n\tprivate apiKey: string;\n\n\tconstructor(apiKey: string) {\n\t\t// Key.\n\t\tthis.apiKey = apiKey;\n\t}\n\n\tprivate httpCall(details: Request, params: any, callback?: InternalCallback): Promise<any | void>  {\n\t\tconst requestOpts = {\n\t\t\tbody: params || {},\n\t\t\theaders: {\n\t\t\t\tAuthorization: `Bearer ${this.apiKey}`\n\t\t\t},\n\t\t\tjson: true,\n\t\t\tmethod: details.reqType,\n\t\t\turl: `${URL}/${this.formatPath(details.path, params)}`\n\t\t};\n\n\t\t// Make the request.\n\t\treturn request(requestOpts).promise().catch((error: any) => {\n\t\t\t// Format this into something useful, if we can.\n\t\t\tthrow new FrontError(error);\n\t\t}).asCallback(callback);\n\t}\n\n\tprivate formatPath(path: string, data: RequestData = {}): string {\n\t\tlet newPath = path;\n\t\tconst reSearch = (re: RegExp, operation: (matches: RegExpMatchArray) => void) => {\n\t\t\tlet matches = path.match(re);\n\t\t\tif (matches) {\n\t\t\t\toperation(matches);\n\t\t\t}\n\t\t};\n\n\t\t// Find the mandatories. If we don't get them, then we error.\n\t\treSearch(/<(.*?)>/g, (mandatoryTags: RegExpMatchArray) => {\n\t\t\t_.map(mandatoryTags, (tag) => {\n\t\t\t\tconst tagName = tag.substring(1, tag.length -1);\n\t\t\t\tif (!data[tagName]) {\n\t\t\t\t\tthrow new Error(`Tag ${tag} not found in parameter data`);\n\t\t\t\t}\n\t\t\t\tnewPath = newPath.replace(tag, data[tagName]);\n\t\t\t});\n\t\t});\n\n\t\t// Look for optionals. There should be a max of one as they extend a query\n\t\t// string.\n\t\treSearch(/\\[(.*?)\\]/g, (optionalTags: RegExpMatchArray) => {\n\t\t\tif (optionalTags.length > 1) {\n\t\t\t\tthrow new Error(`Front endpoint ${path} is incorrectly defined`);\n\t\t\t}\n\n\t\t\t// Add each of these tags to an array used for the query string.\n\t\t\tconst trimmedTags = optionalTags[0];\n\t\t\tconst tags = trimmedTags.substring(1, trimmedTags.length - 1).split(':');\n\t\t\tconst queryTags: { [key: string]: string } = {};\n\n\t\t\t// Ensure we remove the optional signature.\n\t\t\tnewPath = newPath.replace(trimmedTags, '');\n\t\t\t_.each(tags, (tag) => {\n\t\t\t\tif (data[tag]) {\n\t\t\t\t\tqueryTags[tag] = data[tag];\n\t\t\t\t}\n\t\t\t});\n\t\t\tnewPath = `${newPath}?${querystring.stringify(queryTags)}`;\n\t\t});\n\n\t\treturn newPath;\n\t}\n}\n\nexport type Callback<T> = (err: Error | null, response: T | null) => void;\n\nexport interface Attachment {\n\tfilename: string;\n\turl: string;\n\tcontentType: string;\n\tsize: number;\n\tmetadata: any;\n}\n\nexport interface Author {\n\t_links: Links;\n\tid: string;\n\temail: string;\n\tusername: string;\n\tfirst_name: string;\n\tlast_name: string;\n\tis_admin: boolean;\n\tis_available: boolean;\n}\n\nexport interface ConversationReference {\n\tconversation_reference: string;\n\tstatus?: string;\n}\n\nexport class FrontError extends TypedError {\n\tpublic name: string;\n\tpublic status: number;\n\tpublic title: string;\n\tpublic message: string;\n\tpublic details?: string[];\n\t[key: string]: number | string | string[] | void;\n\n\tconstructor(error: any) {\n\t\tsuper(error);\n\n\t\tconst frontError = error.error._error;\n\t\tif (frontError) {\n\t\t\t_.each([ 'status', 'title', 'message', 'details' ], (key) => {\n\t\t\t\tif (frontError[key]) {\n\t\t\t\t\tthis[key] = frontError[key];\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t}\n}\n\nexport interface Links {\n\tself: string;\n\trelated: {\n\t\tchannels?: string;\n\t\tcomments?: string;\n\t\tconversation?: string;\n\t\tconversations?: string;\n\t\tcontact?: string;\n\t\tevents?: string;\n\t\tfollowers?: string;\n\t\tinboxes?: string;\n\t\tmessages?: string;\n\t\tmessage_replied_to?: string;\n\t\tmentions?: string;\n\t\tteammates?: string;\n\t};\n}\n\nexport interface Pagination {\n\tlimit: number;\n\tnext?: string;\n\tprev?: string;\n}\n\nexport interface Recipient {\n\t_links: Links;\n\thandle: string;\n\trole: string;\n}\n\nexport interface Sender {\n\tcontact_id?: string;\n\tname?: string;\n\thandle: string;\n}\n\nexport interface Status {\n\tstatus: string;\n}\n\nexport interface Tag {\n\t_links: Links;\n\tid: string;\n\tname: string;\n}\n\n// Channels ///////////////////////////////////////////////////////////////////\nexport interface Channel {\n\t_links: Links;\n\taddress: string;\n\tid: string;\n\tsend_as: string;\n\tsettings?: ChannelSettings;\n\ttype: string;\n}\n\nexport interface ChannelSettings {\n\twebhook_url: string;\n}\n\n// Comments ///////////////////////////////////////////////////////////////////\nexport interface Comment {\n\t_links: Links;\n\tauthor: Author;\n\tbody: string;\n\tid: string;\n\tposted_at: string;\n}\n\nexport interface CommentMentions {\n\t_pagination: Pagination;\n\t_links: Links;\n\t_results: Author[];\n}\n\n// Used for making requests\nexport namespace CommentRequest {\n\t// Request structures /////////////////////////////////////////////////////\n\texport interface Create {\n\t\tconversation_id: string;\n\t\tauthor_id: string;\n\t\tbody: string;\n\t\t[key: string]: string;\n\t}\n\n\texport interface Get {\n\t\tcomment_id: string;\n\t\t[key: string]: string;\n\t}\n\n\texport interface ListMentions {\n\t\tcomment_id: string;\n\t\t[key: string]: string;\n\t}\n}\n\n// Conversations //////////////////////////////////////////////////////////////\nexport interface Conversation {\n\t_links: Links;\n\tid: string;\n\tsubject: string;\n\tstatus: string;\n\tassignee: Author;\n\trecipient: Recipient;\n\ttags: Tag[] | void;\n\tlast_message: Message;\n\tcreated_at: number;\n}\n\nexport interface Conversations {\n\t_pagination: Pagination;\n\t_links: Links;\n\t_results: Conversation[];\n}\n\nexport interface ConversationComments {\n\t_pagination: Pagination;\n\t_links: Links;\n\t_results: Comment[];\n}\n\nexport interface ConversationInboxes {\n\t_pagination: Pagination;\n\t_links: Links;\n\t_results: Inbox[];\n}\n\nexport interface ConversationFollowers {\n\t_pagination: Pagination;\n\t_links: Links;\n\t_results: Author[];\n}\n\nexport interface ConversationMessages {\n\t_pagination: Pagination;\n\t_links: Links;\n\t_results: Message[];\n}\n\nexport namespace ConversationRequest {\n\t// Request structures /////////////////////////////////////////////////////\n\texport interface List {\n\t\tq?: string;\n\t\tpage?: number;\n\t\tlimit?: number;\n\t\t[key: string]: string | number | void;\n\t}\n\n\texport interface Get {\n\t\tconversation_id: string;\n\t\t[key: string]: string;\n\t}\n\n\texport interface Update {\n\t\tconversation_id: string;\n\t\tassignee_id?: string;\n\t\tinbox_id?: string;\n\t\tstatus?: string;\n\t\ttags?: string[];\n\t\t[key: string]: string | string[] | void;\n\t}\n\n\texport interface ListComments {\n\t\tconversation_id: string;\n\t\t[key: string]: string;\n\t}\n\n\texport interface ListInboxes {\n\t\tconversation_id: string;\n\t\t[key: string]: string;\n\t}\n\n\texport interface ListFollowers {\n\t\tconversation_id: string;\n\t\t[key: string]: string;\n\t}\n\n\texport interface ListMessages {\n\t\tconversation_id: string;\n\t\tpage?: number;\n\t\tlimit?: number;\n\t\t[key: string]: string | number | void;\n\t}\n}\n\n// Inboxes ////////////////////////////////////////////////////////////////////\nexport interface Inbox {\n\t_links: Links;\n\taddress: string;\n\tid: string;\n\tname: string;\n\tsend_as: string;\n\ttype: string;\n}\n\nexport interface Inboxes {\n\t_pagination: Pagination;\n\t_links: Links;\n\t_results: Inbox[];\n}\n\nexport interface InboxCreation {\n\tid: string;\n\tname: string;\n}\n\nexport interface InboxChannels {\n\t_pagination: Pagination;\n\t_links: Links;\n\t_results: Channel[];\n}\n\nexport interface InboxConversations {\n\t_pagination: Pagination;\n\t_links: Links;\n\t_results: Conversation[];\n}\n\nexport interface InboxTeammates {\n\t_pagination: Pagination;\n\t_links: Links;\n\t_results: Author[];\n}\n\nexport namespace InboxRequest {\n\t// Request structures /////////////////////////////////////////////////////\n\texport interface Create {\n\t\tname: string;\n\t\tteammate_ids?: string[];\n\t\t[key: string]: string | string[] | void;\n\t}\n\n\texport interface Get {\n\t\tinbox_id: string;\n\t\t[key: string]: string;\n\t}\n\n\texport interface ListChannels {\n\t\tinbox_id: string;\n\t\t[key: string]: string;\n\t}\n\n\texport interface ListConversations {\n\t\tinbox_id: string;\n\t\tq?: string;\n\t\tpage?: number;\n\t\tlimit?: number;\n\t\t[key: string]: string | number | void;\n\t}\n\n\texport interface ListTeammates {\n\t\tinbox_id: string;\n\t\t[key: string]: string;\n\t}\n}\n\n// Messages ///////////////////////////////////////////////////////////////////\nexport interface Message {\n\t_links: Links;\n\tid: string;\n\ttype: string;\n\tis_inbound: boolean;\n\tcreated_at: number;\n\tblurb: string;\n\tauthor: Author;\n\trecipients: Recipient[];\n\tbody: string;\n\ttext: string;\n\tattachments: Attachment[];\n\tmetadata: any;\n}\n\nexport namespace MessageRequest {\n\t// Request structures /////////////////////////////////////////////////////\n\texport interface MessageOptions {\n\t\ttags?: string[];\n\t\tarchive?: boolean;\n\t\t[key: string]: string[] | boolean | void;\n\t}\n\n\texport interface Get {\n\t\tmessage_id: string;\n\t\t[key: string]: string;\n\t}\n\n\t// Base object for message sending.\n\texport interface SendBase {\n\t\tauthor_id?: string;\n\t\tsubject?: string;\n\t\tbody: string;\n\t\ttext?: string;\n\t\toptions?: MessageOptions;\n\t\tcc?: string[];\n\t\tbcc?: string[];\n\t\t[key: string]: string | string[] | MessageOptions | void;\n\t}\n\n\t// Send a MessageRequest.\n\texport interface Send extends SendBase {\n\t\tchannel_id: string;\n\t\tto: string[];\n\t\t[key: string]: string | string[] | MessageOptions | void;\n\t}\n\n\t// Send a reply to a ConversationRequest.\n\texport interface Reply extends SendBase {\n\t\tconversation_id: string;\n\t\tto?: string[];\n\t\tchannel_id?: string;\n\t\t[key: string]: string | string[] | MessageOptions | void;\n\t}\n\n\texport interface ReceiveCustom {\n\t\tchannel_id: string;\n\t\tsender: Sender;\n\t\tsubject?: string;\n\t\tbody: string;\n\t\tbody_format?: string;\n\t\tmetadata?: any;\n\t\t[key: string]: string | any | void;\n\t}\n}\n\n// Topics /////////////////////////////////////////////////////////////////////\nexport interface TopicConversations {\n\t_pagination: Pagination;\n\t_links: Links;\n\t_results: Conversation[];\n}\n\nexport namespace TopicRequest {\n\texport interface ListConversations {\n\t\ttopic_id: string;\n\t\tq?: string;\n\t\tpage?: number;\n\t\tlimit?: number;\n\t\t[key: string]: string | number | void;\n\t}\n}\n\n// Export Types ///////////////////////////////////////////////////////////////\nexport type RequestData =\n\tCommentRequest.Create | CommentRequest.Get | CommentRequest.ListMentions |\n\tConversationRequest.List | ConversationRequest.Get | ConversationRequest.Update |\n\t\tConversationRequest.ListComments | ConversationRequest.ListFollowers |\n\t\tConversationRequest.ListInboxes | ConversationRequest.ListMessages |\n\tInboxRequest.Create | InboxRequest.Get | InboxRequest.ListChannels |\n\t\tInboxRequest.ListConversations | InboxRequest.ListTeammates |\n\tMessageRequest.Get | MessageRequest.Send | MessageRequest.Reply |\n\t\tMessageRequest.ReceiveCustom |\n\tTopicRequest.ListConversations;\n\nexport type ResponseData =\n\tAttachment | Author | Links | Recipient | Sender | Tag | ConversationReference |\n\tComment | CommentMentions |\n\tConversation | Conversations | ConversationInboxes | ConversationFollowers |\n\t\tConversationMessages |\n\tInbox | Inboxes | InboxCreation | InboxChannels | InboxConversations |\n\t\tInboxTeammates |\n\tMessage |\n\tTopicConversations;\n"],"sourceRoot":"../lib"}