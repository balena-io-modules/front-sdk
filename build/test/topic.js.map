{"version":3,"sources":["test/topic.ts"],"names":[],"mappings":"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","file":"topic.js","sourcesContent":["// Needed due to chai's should.exist\n/* tslint:disable: no-unused-expression */\nimport * as Promise from 'bluebird';\nimport * as chai from 'chai';\nimport * as ChaiAsPromised from 'chai-as-promised';\nimport * as GithubApi from 'github';\nimport 'mocha';\nimport { Conversation, Front, FrontError, TopicConversations } from '../lib/index';\nimport { getKeeper } from './keeper';\n\nchai.use(ChaiAsPromised);\nchai.should();\n\ndescribe('Topics', function () {\n\tconst vaultKeeper = getKeeper();\n\tconst keys = vaultKeeper.keys;\n\tlet frontInst: Front;\n\tlet githubInst: GithubApi;\n\n\tbefore(function () {\n\t\tfrontInst = new Front(keys.apiKey);\n\t\tgithubInst = new GithubApi({\n\t\t\tPromise: <any>Promise,\n\t\t\theaders: {\n\t\t\t\tAccept: 'application/vnd.github.loki-preview+json'\n\t\t\t},\n\t\t\thost: 'api.github.com',\n\t\t\tprotocol: 'https',\n\t\t\ttimeout: 5000\n\t\t});\n\t});\n\n\tit('should return an empty results list for an invalid topic', function () {\n\t\treturn frontInst.topic.listConversations({ topic_id: 'top_xxxxx' }).then(() => {\n\t\t\tthrow new Error('Received a result for an invalid topic');\n\t\t}).catch(FrontError, (error: FrontError) => {\n\t\t\terror.name.should.eq('FrontError');\n\t\t\terror.status.should.eq(404);\n\t\t});\n\t});\n\n\tit('should list all of conversations associated with a topic', function () {\n\t\treturn githubInst.issues.get({\n\t\t\tnumber: keys.testTopicIssue.issue,\n\t\t\towner: keys.testTopicIssue.owner,\n\t\t\trepo: keys.testTopicIssue.repo,\n\t\t}).then((issue) => {\n\t\t\tissue.data.body.should.exist;\n\t\t\tconst bodyText = issue.data.body;\n\t\t\tconst frontTopic = bodyText.match(/\\[.*]\\((.*)\\)/m)[1];\n\t\t\tconst topicId = frontTopic.slice(frontTopic.lastIndexOf('/') + 1);\n\n\t\t\treturn frontInst.topic.listConversations({ topic_id: topicId });\n\t\t}).then((response: TopicConversations) => {\n\t\t\tresponse._pagination.should.exist;\n\t\t\tresponse._pagination.should.have.keys('prev', 'next');\n\t\t\tresponse._links.should.exist;\n\t\t\tresponse._links.should.have.key('self');\n\t\t\tresponse._results.should.exist;\n\t\t\tresponse._results.length.should.eq(1);\n\n\t\t\tconst conversation: Conversation = response._results[0];\n\t\t\tconversation._links.should.exist;\n\t\t\tconversation._links.should.have.keys('self', 'related');\n\t\t\tconversation.id.should.eq(keys.testConversationId);\n\t\t\tconversation.subject.should.eq(keys.testMessageSubject);\n\t\t\tconversation.status.should.exist;\n\t\t\tconversation.recipient.should.exist;\n\t\t\tconversation.last_message.should.exist;\n\t\t\tconversation.last_message.id.should.exist;\n\t\t\tconversation.last_message.body.should.eq(keys.testMessageResponse);\n\t\t\tconversation.created_at.should.exist;\n\t\t});\n\t});\n});\n"],"sourceRoot":"../../lib"}