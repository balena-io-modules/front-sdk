{"version":3,"sources":["test/inbox.ts"],"names":[],"mappings":"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","file":"inbox.js","sourcesContent":["// Needed due to chai's should.exist\n/* tslint:disable: no-unused-expression */\nimport * as chai from 'chai';\nimport * as ChaiAsPromised from 'chai-as-promised';\nimport ChaiString = require('chai-string');\nimport * as _ from 'lodash';\nimport 'mocha';\nimport { Author, Channel, Front, Inbox, InboxChannels,\n\tInboxConversations, Inboxes, InboxTeammates } from '../lib/index';\nimport { getKeeper } from './keeper';\n\nchai.use(ChaiAsPromised);\nchai.use(ChaiString);\nchai.should();\n\ndescribe('Inboxes', function () {\n\tconst apiUrl = 'https://api2.frontapp.com';\n\tconst vaultKeeper = getKeeper();\n\tconst keys = vaultKeeper.keys;\n\tlet frontInst: Front;\n\n\tbefore(function () {\n\t\tfrontInst = new Front(keys.apiKey);\n\t});\n\n\tit('should list all of the current inboxes and find a named one', function () {\n\t\treturn frontInst.inbox.list().then(function (response: Inboxes) {\n\t\t\tresponse._pagination.should.exist;\n\t\t\tresponse._pagination.should.include.keys('next', 'prev');\n\t\t\tresponse._links.should.exist;\n\t\t\tresponse._links.self.should.startsWith(`${apiUrl}/inboxes`);\n\t\t\tresponse._results.length.should.be.gt(1);\n\n\t\t\t// Take first result, ensure it includes everything we know about\n\t\t\tconst inbox: Inbox = response._results[0];\n\t\t\tinbox.should.include.keys('_links', 'id', 'address', 'send_as', 'name', 'type');\n\n\t\t\t// Find the right inbox for our test.Me too\n\t\t\tconst foundInbox: Inbox | undefined = _.find(response._results, ['name', keys.testInbox]);\n\t\t\tif (!foundInbox) {\n\t\t\t\tthrow new Error('Test inbox could not be found');\n\t\t\t}\n\t\t\tkeys.testInboxId = foundInbox.id;\n\t\t});\n\t});\n\n\tit('should get known test inbox', function () {\n\t\t// Uses inbox ID from previous test.\n\t\tif (!keys.testInboxId) {\n\t\t\tthrow new Error('Cannot find inbox ID');\n\t\t}\n\t\treturn frontInst.inbox.get({ inbox_id: keys.testInboxId}).then(function (response: Inbox) {\n\t\t\tresponse._links.should.exist;\n\t\t\tresponse._links.should.include.keys('self', 'related');\n\t\t\tresponse._links.self.should.startsWith(`${apiUrl}/inboxes/${keys.testInboxId}`);\n\t\t\tresponse._links.related.should.include.keys('channels', 'conversations', 'teammates');\n\t\t\tresponse.id.should.equal(keys.testInboxId);\n\t\t\tresponse.name.should.equal(keys.testInbox);\n\t\t\tresponse.type.should.equal('custom');\n\t\t\tresponse.address.should.exist;\n\t\t\tresponse.send_as.should.exist;\n\t\t});\n\t});\n\n\tit('should list all channels for an inbox, and find integration test channel', function () {\n\t\tif (!keys.testInboxId) {\n\t\t\tthrow new Error('Cannot find inbox ID');\n\t\t}\n\t\treturn frontInst.inbox.listChannels({ inbox_id: keys.testInboxId }).then(function (response: InboxChannels) {\n\t\t\tresponse._pagination.should.exist;\n\t\t\tresponse._pagination.should.include.keys('next', 'prev');\n\t\t\tresponse._links.should.exist;\n\t\t\tresponse._links.self.should.startsWith(`${apiUrl}/inboxes/${keys.testInboxId}/channels`);\n\t\t\tresponse._results.should.exist;\n\t\t\tresponse._results.length.should.be.gt(1);\n\t\t\tconst testChannel: Channel | undefined = _.find(response._results, ['id', keys.testChannel ]);\n\t\t\tif (!testChannel) {\n\t\t\t\tthrow new Error('Channel for test inbox could not be found');\n\t\t\t}\n\t\t\t// TBD, ensure relevant keys exist on channel when Channel functionality added.\n\t\t});\n\t});\n\n\tit('should list all conversations in the test inbox, finding previously known ones', function () {\n\t\tif (!keys.testInboxId) {\n\t\t\tthrow new Error('Cannot find inbox ID');\n\t\t}\n\t\treturn frontInst.inbox.listConversations({ inbox_id: keys.testInboxId })\n\t\t.then(function (response: InboxConversations) {\n\t\t\tresponse._pagination.should.exist;\n\t\t\tresponse._pagination.should.include.keys('next', 'prev');\n\t\t\tresponse._links.should.exist;\n\t\t\tresponse._links.self.should.startsWith(`${apiUrl}/inboxes/${keys.testInboxId}/conversations`);\n\t\t\tresponse._results.should.exist;\n\t\t\tresponse._results.length.should.be.gt(1);\n\t\t});\n\t});\n\n\tit('should list all conversations in the test inbox using query string, finding previously known ones', function () {\n\t\tif (!keys.testInboxId) {\n\t\t\tthrow new Error('Cannot find inbox ID');\n\t\t}\n\t\treturn frontInst.inbox.listConversations({\n\t\t\tinbox_id: keys.testInboxId,\n\t\t\tq: 'q[statuses][]=unassigned&q[statuses][]=assigned'\n\t\t}).then(function (response: InboxConversations) {\n\t\t\tresponse._pagination.should.exist;\n\t\t\tresponse._pagination.should.include.keys('next', 'prev');\n\t\t\tresponse._links.should.exist;\n\t\t\tresponse._links.self.should.startWith(`${apiUrl}/inboxes/${keys.testInboxId}/conversations`);\n\t\t\tresponse._links.self.should.include('q[statuses][]=unassigned&q[statuses][]=assigned');\n\t\t\tresponse._results.should.exist;\n\t\t\tresponse._results.length.should.be.gt(1);\n\t\t});\n\t});\n\n\tit('should list all teammates for the test inbox', function () {\n\t\tif (!keys.testInboxId) {\n\t\t\tthrow new Error('Cannot find inbox ID');\n\t\t}\n\t\treturn frontInst.inbox.listTeammates({ inbox_id: keys.testInboxId}).then(function (response: InboxTeammates) {\n\t\t\tresponse._pagination.should.exist;\n\t\t\tresponse._pagination.should.include.keys('next', 'prev');\n\t\t\tresponse._links.should.exist;\n\t\t\tresponse._links.self.should.startWith(`${apiUrl}/inboxes/${keys.testInboxId}/teammates`);\n\t\t\tresponse._results.should.exist;\n\t\t\tresponse._results.length.should.be.gte(1);\n\t\t\tconst testAuthor: Author | undefined = _.find(response._results, ['username', keys.testAuthor ]);\n\t\t\tif (!testAuthor) {\n\t\t\t\tthrow new Error('Author for test inbox could not be found');\n\t\t\t}\n\n\t\t\t// Store the author key, we'll use it in other tests.\n\t\t\tkeys.testAuthorId = testAuthor.id;\n\t\t});\n\t});\n});\n"],"sourceRoot":"../../lib"}