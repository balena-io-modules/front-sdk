{"version":3,"sources":["test/comment.ts"],"names":[],"mappings":";;AAEA,2BAA6B;AAC7B,iDAAmD;AACnD,0BAA4B;AAC5B,iBAAe;AACf,sCAA+D;AAC/D,mCAAqC;AAErC,IAAI,CAAC,GAAG,CAAC,cAAc,CAAC,CAAC;AACzB,IAAI,CAAC,MAAM,EAAE,CAAC;AAEd,QAAQ,CAAC,UAAU,EAAE;IACpB,IAAM,WAAW,GAAG,kBAAS,EAAE,CAAC;IAChC,IAAM,IAAI,GAAG,WAAW,CAAC,IAAI,CAAC;IAC9B,IAAM,WAAW,GAAG,kBAAgB,IAAI,EAAE,CAAC,QAAQ,EAAE,cAAS,IAAI,CAAC,UAAY,CAAC;IAChF,IAAI,SAAgB,CAAC;IAErB,MAAM,CAAC;QACN,SAAS,GAAG,IAAI,aAAK,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;IACpC,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,iDAAiD,EAAE;QACrD,IAAI,CAAC,IAAI,CAAC,kBAAkB,EAAE;YAC7B,MAAM,IAAI,KAAK,CAAC,6BAA6B,CAAC,CAAC;SAC/C;QACD,IAAI,CAAC,IAAI,CAAC,YAAY,EAAE;YACvB,MAAM,IAAI,KAAK,CAAC,uBAAuB,CAAC,CAAC;SACzC;QACD,OAAO,SAAS,CAAC,OAAO,CAAC,MAAM,CAAC;YAC/B,SAAS,EAAE,IAAI,CAAC,YAAY;YAC5B,IAAI,EAAE,WAAW;YACjB,eAAe,EAAE,IAAI,CAAC,kBAAkB;SACxC,CAAC,CAAC,IAAI,CAAC,UAAU,QAAiB;YAClC,QAAQ,CAAC,MAAM,CAAC,MAAM,CAAC,KAAK,CAAC;YAC7B,QAAQ,CAAC,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,MAAM,EAAE,SAAS,CAAC,CAAC;YACpD,QAAQ,CAAC,EAAE,CAAC,MAAM,CAAC,KAAK,CAAC;YACzB,QAAQ,CAAC,SAAS,CAAC,MAAM,CAAC,KAAK,CAAC;YAChC,QAAQ,CAAC,IAAI,CAAC,MAAM,CAAC,EAAE,CAAC,WAAW,CAAC,CAAC;YACrC,QAAQ,CAAC,MAAM,CAAC,MAAM,CAAC,KAAK,CAAC;YAC7B,QAAQ,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,KAAK,CAAC;YACpC,QAAQ,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,MAAM,EAAE,SAAS,CAAC,CAAC;YAC3D,QAAQ,CAAC,MAAM,CAAC,QAAQ,CAAC,MAAM,CAAC,EAAE,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;YAEpD,IAAI,CAAC,aAAa,GAAG,QAAQ,CAAC,EAAE,CAAC;QAClC,CAAC,CAAC,CAAC;IACJ,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,uDAAuD,EAAE;QAC3D,IAAI,CAAC,IAAI,CAAC,aAAa,EAAE;YACxB,MAAM,IAAI,KAAK,CAAC,wBAAwB,CAAC,CAAC;SAC1C;QACD,OAAO,SAAS,CAAC,OAAO,CAAC,GAAG,CAAC,EAAE,UAAU,EAAE,IAAI,CAAC,aAAa,EAAE,CAAC,CAAC,IAAI,CAAC,UAAU,QAAiB;YAChG,QAAQ,CAAC,MAAM,CAAC,MAAM,CAAC,KAAK,CAAC;YAC7B,QAAQ,CAAC,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,MAAM,EAAE,SAAS,CAAC,CAAC;YACpD,QAAQ,CAAC,EAAE,CAAC,MAAM,CAAC,KAAK,CAAC;YACzB,QAAQ,CAAC,EAAE,CAAC,MAAM,CAAC,EAAE,CAAC,IAAI,CAAC,aAAa,CAAC,CAAC;YAC1C,QAAQ,CAAC,IAAI,CAAC,MAAM,CAAC,EAAE,CAAC,WAAW,CAAC,CAAC;YACrC,QAAQ,CAAC,SAAS,CAAC,MAAM,CAAC,KAAK,CAAC;YAChC,QAAQ,CAAC,MAAM,CAAC,MAAM,CAAC,KAAK,CAAC;YAC7B,QAAQ,CAAC,MAAM,CAAC,QAAQ,CAAC,MAAM,CAAC,EAAE,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;QACrD,CAAC,CAAC,CAAC;IACJ,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,kDAAkD,EAAE;QACtD,IAAI,CAAC,IAAI,CAAC,aAAa,EAAE;YACxB,MAAM,IAAI,KAAK,CAAC,wBAAwB,CAAC,CAAC;SAC1C;QACD,OAAO,SAAS,CAAC,OAAO,CAAC,YAAY,CAAC,EAAE,UAAU,EAAE,IAAI,CAAC,aAAa,EAAE,CAAC;aACxE,IAAI,CAAC,UAAU,QAAyB;YACxC,QAAQ,CAAC,WAAW,CAAC,MAAM,CAAC,KAAK,CAAC;YAClC,QAAQ,CAAC,WAAW,CAAC,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,MAAM,EAAE,MAAM,CAAC,CAAC;YACtD,QAAQ,CAAC,MAAM,CAAC,MAAM,CAAC,KAAK,CAAC;YAC7B,QAAQ,CAAC,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;YACzC,QAAQ,CAAC,QAAQ,CAAC,MAAM,CAAC,KAAK,CAAC;YAC/B,QAAQ,CAAC,QAAQ,CAAC,MAAM,CAAC,MAAM,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;YACzC,QAAQ,CAAC,QAAQ,CAAC,MAAM,CAAC,OAAO,CAAC,UAAU,OAAkB;gBAC5D,OAAO,CAAC,CAAC,IAAI,CAAC,OAAO,EAAE,CAAC,IAAI,EAAE,IAAI,CAAC,YAAY,CAAC,CAAC,CAAC;YACnD,CAAC,CAAC,CAAC;QACJ,CAAC,CAAC,CAAC;IACJ,CAAC,CAAC,CAAC;AACJ,CAAC,CAAC,CAAC","file":"comment.js","sourcesContent":["// Needed due to chai's should.exist\n/* tslint:disable: no-unused-expression */\nimport * as chai from 'chai';\nimport * as ChaiAsPromised from 'chai-as-promised';\nimport * as _ from 'lodash';\nimport 'mocha';\nimport { Comment, CommentMentions, Front } from '../lib/index';\nimport { getKeeper } from './keeper';\n\nchai.use(ChaiAsPromised);\nchai.should();\n\ndescribe('Comments', function () {\n\tconst vaultKeeper = getKeeper();\n\tconst keys = vaultKeeper.keys;\n\tconst testComment = `Test comment ${Date().toString()} for @${keys.testAuthor}`;\n\tlet frontInst: Front;\n\n\tbefore(function () {\n\t\tfrontInst = new Front(keys.apiKey);\n\t});\n\n\tit('should create a new comment in the conversation', function () {\n\t\tif (!keys.testConversationId) {\n\t\t\tthrow new Error('Cannot find conversation ID');\n\t\t}\n\t\tif (!keys.testAuthorId) {\n\t\t\tthrow new Error('Cannot find author ID');\n\t\t}\n\t\treturn frontInst.comment.create({\n\t\t\tauthor_id: keys.testAuthorId,\n\t\t\tbody: testComment,\n\t\t\tconversation_id: keys.testConversationId,\n\t\t}).then(function (response: Comment) {\n\t\t\tresponse._links.should.exist;\n\t\t\tresponse._links.should.have.keys('self', 'related');\n\t\t\tresponse.id.should.exist;\n\t\t\tresponse.posted_at.should.exist;\n\t\t\tresponse.body.should.eq(testComment);\n\t\t\tresponse.author.should.exist;\n\t\t\tresponse.author._links.should.exist;\n\t\t\tresponse.author._links.should.have.keys('self', 'related');\n\t\t\tresponse.author.username.should.eq(keys.testAuthor);\n\n\t\t\tkeys.testCommentId = response.id;\n\t\t});\n\t});\n\n\tit('should get the specific comment from the conversation', function () {\n\t\tif (!keys.testCommentId) {\n\t\t\tthrow new Error('Cannot find comment ID');\n\t\t}\n\t\treturn frontInst.comment.get({ comment_id: keys.testCommentId }).then(function (response: Comment) {\n\t\t\tresponse._links.should.exist;\n\t\t\tresponse._links.should.have.keys('self', 'related');\n\t\t\tresponse.id.should.exist;\n\t\t\tresponse.id.should.eq(keys.testCommentId);\n\t\t\tresponse.body.should.eq(testComment);\n\t\t\tresponse.posted_at.should.exist;\n\t\t\tresponse.author.should.exist;\n\t\t\tresponse.author.username.should.eq(keys.testAuthor);\n\t\t});\n\t});\n\n\tit('should list the teammates mentioned in a comment', function () {\n\t\tif (!keys.testCommentId) {\n\t\t\tthrow new Error('Cannot find comment ID');\n\t\t}\n\t\treturn frontInst.comment.listMentions({ comment_id: keys.testCommentId })\n\t\t.then(function (response: CommentMentions) {\n\t\t\tresponse._pagination.should.exist;\n\t\t\tresponse._pagination.should.have.keys('prev', 'next');\n\t\t\tresponse._links.should.exist;\n\t\t\tresponse._links.should.have.keys('self');\n\t\t\tresponse._results.should.exist;\n\t\t\tresponse._results.length.should.be.gt(0);\n\t\t\tresponse._results.should.satisfy(function (results: Comment[]) {\n\t\t\t\treturn _.find(results, ['id', keys.testAuthorId]);\n\t\t\t});\n\t\t});\n\t});\n});\n"],"sourceRoot":"../../lib"}