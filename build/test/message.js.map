{"version":3,"sources":["test/message.ts"],"names":[],"mappings":";;AAEA,kCAAoC;AACpC,2BAA6B;AAC7B,iDAAmD;AACnD,iBAAe;AACf,sCAC8B;AAC9B,mCAAqC;AAErC,IAAI,CAAC,GAAG,CAAC,cAAc,CAAC,CAAC;AACzB,IAAI,CAAC,MAAM,EAAE,CAAC;AAEd,QAAQ,CAAC,UAAU,EAAE;IACpB,IAAM,WAAW,GAAG,kBAAS,EAAE,CAAC;IAChC,IAAM,IAAI,GAAG,WAAW,CAAC,IAAI,CAAC;IAC9B,IAAM,SAAS,GAAG,SAAS,CAAC;IAC5B,IAAM,QAAQ,GAAG,eAAe,CAAC;IACjC,IAAI,SAAgB,CAAC;IAErB,MAAM,CAAC;QACN,SAAS,GAAG,IAAI,aAAK,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;QACnC,IAAI,CAAC,kBAAkB,GAAG,4BAA0B,IAAI,EAAE,CAAC,QAAQ,EAAI,CAAC;QACxE,IAAI,CAAC,mBAAmB,GAAG,mBAAiB,IAAI,EAAE,CAAC,QAAQ,EAAI,CAAC;IACjE,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,mEAAmE,EAAE;QACvE,IAAI,CAAC,IAAI,CAAC,YAAY,EAAE;YACvB,MAAM,IAAI,KAAK,CAAC,+CAA+C,CAAC,CAAC;SACjE;QACD,OAAO,SAAS,CAAC,OAAO,CAAC,IAAI,CAAC;YAC7B,IAAI,EAAE,QAAQ;YACd,UAAU,EAAE,IAAI,CAAC,WAAW;YAC5B,OAAO,EAAE,IAAI,CAAC,kBAAkB;YAChC,EAAE,EAAE,CAAE,IAAI,CAAC,YAAY,CAAE;SACzB,CAAC,CAAC,IAAI,CAAC,UAAU,QAAiB;YAClC,QAAQ,CAAC,MAAM,CAAC,KAAK,CAAC;QACvB,CAAC,CAAC,CAAC;IACJ,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,yEAAyE,EAAE;QAG7E,OAAO,SAAS,CAAC,OAAO,CAAC,aAAa,CAAC;YACtC,IAAI,EAAE,QAAQ;YACd,UAAU,EAAE,IAAI,CAAC,WAAW;YAC5B,MAAM,EAAE;gBACP,MAAM,EAAE,SAAS;aACjB;YACD,OAAO,EAAE,IAAI,CAAC,kBAAkB;SAChC,CAAC,CAAC,IAAI,CAAC,UAAU,QAA+B;YAEhD,QAAQ,CAAC,sBAAsB,CAAC,MAAM,CAAC,KAAK,CAAC;YAC7C,IAAI,QAAQ,CAAC,MAAM,EAAE;gBACpB,QAAQ,CAAC,MAAM,CAAC,MAAM,CAAC,EAAE,CAAC,UAAU,CAAC,CAAC;aACtC;YAED,IAAI,CAAC,kBAAkB,GAAG,QAAQ,CAAC,sBAAsB,CAAC;YAE1D,OAAO,OAAO,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC;QAC5B,CAAC,CAAC,CAAC;IACJ,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,4DAA4D,EAAE;QAChE,IAAI,CAAC,IAAI,CAAC,kBAAkB,EAAE;YAC7B,MAAM,IAAI,KAAK,CAAC,iDAAiD,CAAC,CAAC;SACnE;QAED,OAAO,SAAS,CAAC,YAAY,CAAC,GAAG,CAAC,EAAE,eAAe,EAAE,aAAW,IAAI,CAAC,kBAAoB,EAAE,CAAC;aAC3F,IAAI,CAAC,UAAU,QAAsB;YAErC,QAAQ,CAAC,MAAM,CAAC,MAAM,CAAC,KAAK,CAAC;YAC7B,QAAQ,CAAC,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,MAAM,EAAE,SAAS,CAAC,CAAC;YACpD,QAAQ,CAAC,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,QAAQ,EAAE,WAAW,EAAE,UAAU,EAAE,UAAU,EAAE,SAAS,CAAC,CAAC;YACnG,QAAQ,CAAC,EAAE,CAAC,MAAM,CAAC,KAAK,CAAC;YACzB,QAAQ,CAAC,OAAO,CAAC,MAAM,CAAC,EAAE,CAAC,IAAI,CAAC,kBAAkB,CAAC,CAAC;YACpD,QAAQ,CAAC,MAAM,CAAC,MAAM,CAAC,EAAE,CAAC,YAAY,CAAC,CAAC;YACxC,QAAQ,CAAC,SAAS,CAAC,MAAM,CAAC,MAAM,CAAC,KAAK,CAAC;YACvC,QAAQ,CAAC,SAAS,CAAC,MAAM,CAAC,MAAM,CAAC,KAAK,CAAC,SAAS,CAAC,CAAC;YAClD,QAAQ,CAAC,YAAY,CAAC,MAAM,CAAC,KAAK,CAAC;YACnC,IAAI,CAAC,kBAAkB,GAAG,QAAQ,CAAC,EAAE,CAAC;YACtC,IAAI,CAAC,aAAa,GAAG,QAAQ,CAAC,YAAY,CAAC,EAAE,CAAC;YAG9C,OAAO,SAAS,CAAC,OAAO,CAAC,GAAG,CAAC,EAAE,UAAU,EAAE,QAAQ,CAAC,YAAY,CAAC,EAAE,EAAE,CAAC,CAAC;QACxE,CAAC,CAAC,CAAC,IAAI,CAAC,UAAU,QAAiB;YAClC,QAAQ,CAAC,MAAM,CAAC,MAAM,CAAC,KAAK,CAAC;YAC7B,QAAQ,CAAC,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,MAAM,EAAE,SAAS,CAAC,CAAC;YACpD,QAAQ,CAAC,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,IAAI,CAAC,GAAG,CAAC,cAAc,CAAC,CAAC;YACxD,QAAQ,CAAC,EAAE,CAAC,MAAM,CAAC,KAAK,CAAC,IAAI,CAAC,aAAa,CAAC,CAAC;YAC7C,QAAQ,CAAC,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,QAAQ,CAAC,CAAC;YACrC,QAAQ,CAAC,UAAU,CAAC,MAAM,CAAC,EAAE,CAAC,IAAI,CAAC,CAAC;YACpC,QAAQ,CAAC,UAAU,CAAC,MAAM,CAAC,KAAK,CAAC;YACjC,QAAQ,CAAC,KAAK,CAAC,MAAM,CAAC,KAAK,CAAC;YAC5B,QAAQ,CAAC,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC;YAC3B,QAAQ,CAAC,IAAI,CAAC,MAAM,CAAC,EAAE,CAAC,QAAQ,CAAC,CAAC;YAClC,QAAQ,CAAC,QAAQ,CAAC,MAAM,CAAC,KAAK,CAAC;QAChC,CAAC,CAAC,CAAC;IACJ,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,kEAAkE,EAAE;QACtE,IAAI,CAAC,IAAI,CAAC,kBAAkB,EAAE;YAC7B,MAAM,IAAI,KAAK,CAAC,6BAA6B,CAAC,CAAC;SAC/C;QACD,IAAI,CAAC,IAAI,CAAC,mBAAmB,EAAE;YAC9B,MAAM,IAAI,KAAK,CAAC,6BAA6B,CAAC,CAAC;SAC/C;QAGD,OAAO,SAAS,CAAC,OAAO,CAAC,KAAK,CAAC;YAC9B,IAAI,EAAE,IAAI,CAAC,mBAAmB;YAC9B,eAAe,EAAE,IAAI,CAAC,kBAAkB;SACxC,CAAC,CAAC,IAAI,CAAC,UAAC,QAAQ;YAChB,QAAQ,CAAC,MAAM,CAAC,KAAK,CAAC;QACvB,CAAC,CAAC,CAAC;IACJ,CAAC,CAAC,CAAC;AACJ,CAAC,CAAC,CAAC","file":"message.js","sourcesContent":["// Needed due to chai's should.exist\n/* tslint:disable: no-unused-expression */\nimport * as Promise from 'bluebird';\nimport * as chai from 'chai';\nimport * as ChaiAsPromised from 'chai-as-promised';\nimport 'mocha';\nimport { Conversation, ConversationReference, Front, Message,\n\tStatus } from '../lib/index';\nimport { getKeeper } from './keeper';\n\nchai.use(ChaiAsPromised);\nchai.should();\n\ndescribe('Messages', function () {\n\tconst vaultKeeper = getKeeper();\n\tconst keys = vaultKeeper.keys;\n\tconst recipient = 'testbot';\n\tconst testText = `Please ignore`;\n\tlet frontInst: Front;\n\n\tbefore(function () {\n\t\tfrontInst = new Front(keys.apiKey);\n\t\tkeys.testMessageSubject = `Front SDK Subject Test ${Date().toString()}`;\n\t\tkeys.testMessageResponse = `Test Response ${Date().toString()}`;\n\t});\n\n\tit('should send a test message, checking for a conversation reference', function () {\n\t\tif (!keys.testAuthorId) {\n\t\t\tthrow new Error('Cannot send a message as author ID is missing');\n\t\t}\n\t\treturn frontInst.message.send({\n\t\t\tbody: testText,\n\t\t\tchannel_id: keys.testChannel,\n\t\t\tsubject: keys.testMessageSubject,\n\t\t\tto: [ keys.testAuthorId ],\n\t\t}).then(function (response: Message) {\n\t\t\tresponse.should.exist;\n\t\t});\n\t});\n\n\tit('should receive a message in the test inbox, creating a new conversation', function () {\n\t\t// We use the test channel to post a new message creating a new conversation,\n\t\t// posting to ourselves.\n\t\treturn frontInst.message.receiveCustom({\n\t\t\tbody: testText,\n\t\t\tchannel_id: keys.testChannel,\n\t\t\tsender: {\n\t\t\t\thandle: recipient\n\t\t\t},\n\t\t\tsubject: keys.testMessageSubject,\n\t\t}).then(function (response: ConversationReference) {\n\t\t\t// Store the conversation reference, we'll use it later.\n\t\t\tresponse.conversation_reference.should.exist;\n\t\t\tif (response.status) {\n\t\t\t\tresponse.status.should.eq('accepted');\n\t\t\t}\n\n\t\t\tkeys.testMessageConvRef = response.conversation_reference;\n\n\t\t\treturn Promise.delay(5000);\n\t\t});\n\t});\n\n\tit('should get previous message via the conversation reference', function () {\n\t\tif (!keys.testMessageConvRef) {\n\t\t\tthrow new Error('Cannot find test message conversation reference');\n\t\t}\n\n\t\treturn frontInst.conversation.get({ conversation_id: `alt:ref:${keys.testMessageConvRef}` })\n\t\t.then(function (response: Conversation) {\n\t\t\t// Find the last message (should be the one we sent).\n\t\t\tresponse._links.should.exist;\n\t\t\tresponse._links.should.have.keys('self', 'related');\n\t\t\tresponse._links.related.should.have.keys('events', 'followers', 'messages', 'comments', 'inboxes');\n\t\t\tresponse.id.should.exist;\n\t\t\tresponse.subject.should.eq(keys.testMessageSubject);\n\t\t\tresponse.status.should.eq('unassigned');\n\t\t\tresponse.recipient._links.should.exist;\n\t\t\tresponse.recipient.handle.should.equal(recipient);\n\t\t\tresponse.last_message.should.exist;\n\t\t\tkeys.testConversationId = response.id;\n\t\t\tkeys.testMessageId = response.last_message.id;\n\n\t\t\t// Retrieve the ID.\n\t\t\treturn frontInst.message.get({ message_id: response.last_message.id });\n\t\t}).then(function (response: Message) {\n\t\t\tresponse._links.should.exist;\n\t\t\tresponse._links.should.have.keys('self', 'related');\n\t\t\tresponse._links.related.should.have.key('conversation');\n\t\t\tresponse.id.should.equal(keys.testMessageId);\n\t\t\tresponse.type.should.equal('custom');\n\t\t\tresponse.is_inbound.should.eq(true);\n\t\t\tresponse.created_at.should.exist;\n\t\t\tresponse.blurb.should.exist;\n\t\t\tresponse.body.should.exist;\n\t\t\tresponse.text.should.eq(testText);\n\t\t\tresponse.metadata.should.exist;\n\t\t});\n\t});\n\n\tit('should send a reply to the previous message via the conversation', function () {\n\t\tif (!keys.testConversationId) {\n\t\t\tthrow new Error('Cannot find conversation ID');\n\t\t}\n\t\tif (!keys.testMessageResponse) {\n\t\t\tthrow new Error('Cannot find conversation ID');\n\t\t}\n\n\t\t// Shouldn't receive an error.\n\t\treturn frontInst.message.reply({\n\t\t\tbody: keys.testMessageResponse,\n\t\t\tconversation_id: keys.testConversationId,\n\t\t}).then((response) => {\n\t\t\tresponse.should.exist;\n\t\t});\n\t});\n});\n"],"sourceRoot":"../../lib"}